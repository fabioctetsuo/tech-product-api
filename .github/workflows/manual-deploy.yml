name: Manual Deploy to AWS

on:
  workflow_dispatch:
    inputs:
      docker_image:
        description: 'Docker image to deploy (e.g., username/tech-product-api:latest)'
        required: true
        default: '${{ github.repository }}:latest'
        type: string
      database_url:
        description: 'Database URL (optional - will be retrieved from AWS RDS if not provided)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'products-service'
        type: string
      replicas:
        description: 'Number of replicas'
        required: false
        default: '2'
        type: string

env:
  REGISTRY: docker.io

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1
        
    - name: Update kube config
      run: aws eks update-kubeconfig --region us-east-1 --name tech_challenge_cluster
      
    - name: Verify cluster access
      run: |
        kubectl cluster-info
        kubectl get nodes
        
    - name: Create or update namespace
      run: |
        kubectl create namespace ${{ inputs.namespace }} --dry-run=client -o yaml | kubectl apply -f -
        
    - name: Create or update ConfigMap
      run: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: tech-product-api-config
          namespace: ${{ inputs.namespace }}
        data:
          NODE_ENV: "${{ inputs.environment }}"
          SERVICE_PORT: "3001"
        EOF
        
    - name: Get database URL from AWS RDS
      id: database-url
      run: |
        # Use provided database URL or get dynamically from AWS RDS
        if [ -n "${{ inputs.database_url }}" ]; then
          echo "database_url=${{ inputs.database_url }}" >> $GITHUB_OUTPUT
          echo "✅ Using provided database URL"
        else
          # Get database URL dynamically from AWS RDS
          echo "🔍 Getting database URL from AWS RDS..."
          
          # Get RDS instance details (dynamic parts)
          RDS_ENDPOINT=$(aws rds describe-db-instances \
            --db-instance-identifier tech-challenge-products-db \
            --query 'DBInstances[0].Endpoint.Address' \
            --output text \
            --region us-east-1)
          
          RDS_PORT=$(aws rds describe-db-instances \
            --db-instance-identifier tech-challenge-products-db \
            --query 'DBInstances[0].Endpoint.Port' \
            --output text \
            --region us-east-1)
          
          # Get credentials from GitHub secrets (static parts)
          DB_USERNAME="${{ secrets.DB_USERNAME }}"
          DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          DB_NAME="${{ secrets.DB_NAME }}"
          
          # Construct the database URL
          DATABASE_URL="postgresql://${DB_USERNAME}:${DB_PASSWORD}@${RDS_ENDPOINT}:${RDS_PORT}/${DB_NAME}"
          
          echo "database_url=$DATABASE_URL" >> $GITHUB_OUTPUT
          echo "✅ Database URL retrieved dynamically from AWS RDS"
          echo "Endpoint: $RDS_ENDPOINT"
          echo "Port: $RDS_PORT"
          echo "Database: $DB_NAME"
        fi
        
    - name: Create or update Secret
      run: |
        # Use the database URL from AWS RDS (override with input if provided)
        DATABASE_URL="${{ inputs.database_url || steps.database-url.outputs.database_url }}"
        
        kubectl create secret generic tech-product-api-secret \
          --from-literal=DATABASE_URL="$DATABASE_URL" \
          --namespace=${{ inputs.namespace }} \
          --dry-run=client -o yaml | kubectl apply -f -
          
    - name: Generate Kubernetes manifests
      run: |
        # Set environment variables for template substitution
        export DOCKER_IMAGE="${{ inputs.docker_image }}"
        export SERVICE_NAME="tech-product-api"
        export SERVICE_PORT="3001"
        export NAMESPACE="${{ inputs.namespace }}"
        export DOMAIN_NAME="tech-challenge.local"
        export REPLICAS="${{ inputs.replicas }}"
        
        # Generate manifests
        envsubst < k8s/deployment.yaml.template > k8s/deployment-generated.yaml
        envsubst < k8s/service.yaml.template > k8s/service-generated.yaml
        
        # Update replicas in deployment
        sed -i "s/replicas: 2/replicas: ${{ inputs.replicas }}/" k8s/deployment-generated.yaml
        
        # Verify generated manifests
        echo "Generated deployment manifest:"
        cat k8s/deployment-generated.yaml
        
    - name: Run database migrations
      run: |
        # Generate migration job
        export DOCKER_IMAGE="${{ inputs.docker_image }}"
        envsubst < k8s/migration-job.yaml > k8s/migration-job-generated.yaml
        
        # Apply migration job
        kubectl apply -f k8s/migration-job-generated.yaml
        
        # Wait for migration job to complete
        echo "Waiting for migration job to complete..."
        kubectl wait --for=condition=complete job/tech-product-api-migration -n ${{ inputs.namespace }} --timeout=300s
        
        # Clean up migration job
        kubectl delete -f k8s/migration-job-generated.yaml
        
    - name: Deploy application
      run: |
        # Apply all manifests
        kubectl apply -f k8s/deployment-generated.yaml
        kubectl apply -f k8s/service-generated.yaml
        kubectl apply -f k8s/hpa.yaml
        
        # Wait for deployment to be ready
        echo "Waiting for deployment to be ready..."
        kubectl rollout status deployment/tech-product-api -n ${{ inputs.namespace }} --timeout=300s
        
    - name: Verify deployment
      run: |
        echo "Checking deployment status..."
        kubectl get pods -n ${{ inputs.namespace }}
        kubectl get services -n ${{ inputs.namespace }}
        
    - name: Get service URL
      id: service-url
      run: |
        # Wait a bit for LoadBalancer to be ready
        sleep 30
        
        # Get the LoadBalancer service hostname
        SERVICE_HOST=$(kubectl get svc products-service-loadbalancer -n ${{ inputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ -n "$SERVICE_HOST" ]; then
          echo "service_url=http://$SERVICE_HOST:3001" >> $GITHUB_OUTPUT
          echo "Service URL: http://$SERVICE_HOST:3001"
        else
          echo "service_url=Not available yet" >> $GITHUB_OUTPUT
          echo "Service URL not available yet"
        fi
        
    - name: Health check
      run: |
        SERVICE_URL="${{ steps.service-url.outputs.service_url }}"
        
        if [ "$SERVICE_URL" != "Not available yet" ]; then
          echo "Performing health check..."
          
          # Wait a bit more for the service to be fully ready
          sleep 30
          
          # Try health check
          if curl -f -s "$SERVICE_URL/health" > /dev/null; then
            echo "✅ Service is healthy"
          else
            echo "⚠️  Health check failed, but deployment completed"
          fi
        else
          echo "⚠️  Skipping health check - service URL not available"
        fi
        
    - name: Deployment summary
      run: |
        echo "## 🎉 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Image:** ${{ inputs.docker_image }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment:** ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Replicas:** ${{ inputs.replicas }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Service URL:** ${{ steps.service-url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Useful Commands:**" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get pods -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "kubectl logs -f deployment/tech-product-api -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "kubectl describe ingress tech-product-api-ingress -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY 