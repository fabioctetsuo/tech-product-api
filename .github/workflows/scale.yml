name: Scale Deployment

on:
  workflow_dispatch:
    inputs:
      namespace:
        description: 'Kubernetes namespace'
        required: true
        default: 'products-service'
        type: string
      replicas:
        description: 'Number of replicas'
        required: true
        default: '2'
        type: string
      action:
        description: 'Scaling action'
        required: true
        default: 'scale'
        type: choice
        options:
          - scale
          - scale-up
          - scale-down

jobs:
  scale:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Update kube config
      run: aws eks update-kubeconfig --region us-east-1 --name tech_challenge_cluster
      
    - name: Get current replica count
      id: current-replicas
      run: |
        CURRENT_REPLICAS=$(kubectl get deployment tech-product-api -n ${{ inputs.namespace }} -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
        echo "current_replicas=$CURRENT_REPLICAS" >> $GITHUB_OUTPUT
        echo "Current replicas: $CURRENT_REPLICAS"
        
    - name: Calculate target replicas
      id: target-replicas
      run: |
        CURRENT_REPLICAS="${{ steps.current-replicas.outputs.current_replicas }}"
        TARGET_REPLICAS="${{ inputs.replicas }}"
        
        if [ "${{ inputs.action }}" = "scale-up" ]; then
          TARGET_REPLICAS=$((CURRENT_REPLICAS + TARGET_REPLICAS))
        elif [ "${{ inputs.action }}" = "scale-down" ]; then
          TARGET_REPLICAS=$((CURRENT_REPLICAS - TARGET_REPLICAS))
          if [ $TARGET_REPLICAS -lt 1 ]; then
            TARGET_REPLICAS=1
          fi
        fi
        
        echo "target_replicas=$TARGET_REPLICAS" >> $GITHUB_OUTPUT
        echo "Target replicas: $TARGET_REPLICAS"
        
    - name: Scale deployment
      run: |
        echo "🔄 Scaling deployment to ${{ steps.target-replicas.outputs.target_replicas }} replicas..."
        kubectl scale deployment tech-product-api -n ${{ inputs.namespace }} --replicas=${{ steps.target-replicas.outputs.target_replicas }}
        
    - name: Wait for scaling to complete
      run: |
        echo "⏳ Waiting for scaling to complete..."
        kubectl rollout status deployment/tech-product-api -n ${{ inputs.namespace }} --timeout=300s
        
    - name: Verify scaling
      run: |
        echo "✅ Scaling completed successfully!"
        echo ""
        echo "Current deployment status:"
        kubectl get pods -n ${{ inputs.namespace }}
        kubectl get deployment tech-product-api -n ${{ inputs.namespace }}
        
    - name: Health check
      run: |
        echo "🏥 Performing health check..."
        
        # Get the service URL
        SERVICE_URL=$(kubectl get ingress tech-product-api-ingress -n ${{ inputs.namespace }} -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
        
        if [ -n "$SERVICE_URL" ]; then
          echo "Service URL: http://$SERVICE_URL"
          
          # Wait a bit for the service to be ready
          sleep 30
          
          # Perform health check
          if curl -f -s "http://$SERVICE_URL/health" > /dev/null; then
            echo "✅ Service is healthy after scaling"
          else
            echo "⚠️  Health check failed, but scaling completed"
          fi
        else
          echo "⚠️  Service URL not available"
        fi
        
    - name: Scaling summary
      run: |
        echo "## 📈 Scaling Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scaling Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- **Namespace:** ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Action:** ${{ inputs.action }}" >> $GITHUB_STEP_SUMMARY
        echo "- **From Replicas:** ${{ steps.current-replicas.outputs.current_replicas }}" >> $GITHUB_STEP_SUMMARY
        echo "- **To Replicas:** ${{ steps.target-replicas.outputs.target_replicas }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Useful Commands:**" >> $GITHUB_STEP_SUMMARY
        echo "```bash" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get pods -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "kubectl get deployment tech-product-api -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "kubectl top pods -n ${{ inputs.namespace }}" >> $GITHUB_STEP_SUMMARY
        echo "```" >> $GITHUB_STEP_SUMMARY 